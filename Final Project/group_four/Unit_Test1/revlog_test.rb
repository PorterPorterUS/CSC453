require 'test/unit'
require 'zlib'
require 'fileutils'

load './revlog.rb'

class RevlogTest < Test::Unit::TestCase

=begin
All arguments, ground0-truth values, and test files are generated by python version
=end

  def test_zlib()
    data = "x\x9cK67JKN2H1NI\xb5L1HJKL636L4KIN4745\xb7H\xb34533O67SHJ,\xd2+\xa9(\xe1\x02\x00p\x83\x0ezx\x9cc``0d\x80b\x13s3\xd3TC\xf3$c\x0b\x13K\x13\x0b\xe3\x14c\x13cCcs\xb3Ts\xf3\xb44s\x0bCc3\xf3D\xe3D\x13s#\x85\xb4\xfc|\xbd\x92\x8a\x12.\x00J\xf0\rL"
    last = 57
    s = 63

    res = Zlib::Inflate.inflate(data[last...last + s])
    gt = "\x00\x00\x001\x00\x00\x001\x00\x00\x0014765e17b3849483d3431376e77ff781367a3a472 foo.txt\n"
    assert_equal(gt, res)
  end

  def test_all_in_one
    path_prefix = '.hg_fake/'
    FileUtils.mkdir_p path_prefix
    FileUtils.cp_r './revlog_test/.', path_prefix
    revlog = Revlog.new(path_prefix+"00manifest.i", path_prefix+"00manifest.d")
    revlog.addrevision("text1-content\n")
    revlog.revision(-1)
    revlog = Revlog.new(path_prefix+"00manifest.i", path_prefix+"00manifest.d")
    revlog.addrevision("text2-content\n")
    revlog.revision(0)

    revlog1 = Revlog.new(path_prefix+"00changelog.i", path_prefix+"00changelog.d")
    revlog1.addrevision("revlog1")
    revlog2 = Revlog.new(path_prefix+"01changelog.i", path_prefix+"01changelog.d")
    revlog2.addrevision("revlog2")
    revlog2.mergedag(revlog1)
    revlog2.merge(revlog1)

    FileUtils.rm_rf path_prefix
  end

end